/* The following code was generated by JFlex 1.6.1 */

import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>films.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int InsideOpeningTag = 2;
  public static final int InsideDOCTYPE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\45\2\1\1\44\22\0\1\1\1\10\1\25\14\0"+
    "\1\26\14\0\1\2\1\27\1\7\1\3\3\0\1\13\1\11\1\17"+
    "\7\0\1\24\1\0\1\12\1\16\2\0\1\23\1\14\4\0\1\15"+
    "\7\0\1\32\1\0\1\36\1\41\1\34\1\20\1\37\1\0\1\21"+
    "\2\0\1\6\1\5\1\35\1\31\1\40\1\0\1\33\1\22\1\30"+
    "\1\0\1\43\1\0\1\4\1\0\1\42\12\0\1\1\32\0\1\1"+
    "\u15df\0\1\1\u097f\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1"+
    "\u0fa0\0\1\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\2\4\1\3\1\2\1\5"+
    "\2\3\2\4\1\2\1\6\2\3\2\4\16\0\1\7"+
    "\25\0\1\10\25\0\1\11\5\0\1\12\14\0\1\12"+
    "\25\0\1\13\3\0\1\14\22\0\1\15\6\0\1\16"+
    "\3\0\1\17\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\230"+
    "\0\u010a\0\u0130\0\u010a\0\u0156\0\u017c\0\u01a2\0\u0130\0\u01c8"+
    "\0\u010a\0\u01ee\0\u0214\0\u023a\0\u01c8\0\u0260\0\u0286\0\u02ac"+
    "\0\u02d2\0\u02f8\0\u031e\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc"+
    "\0\u017c\0\u0402\0\u0428\0\u010a\0\u044e\0\u0474\0\u049a\0\u04c0"+
    "\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4\0\u05ca\0\u05f0"+
    "\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u06fa\0\u0720"+
    "\0\u0746\0\u010a\0\u076c\0\u0792\0\u07b8\0\u07de\0\u0804\0\u082a"+
    "\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e\0\u0934\0\u095a"+
    "\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18\0\u0a3e\0\u0a64\0\u010a"+
    "\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48\0\u0b6e\0\u0b94"+
    "\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e\0\u0cc4"+
    "\0\u0cea\0\u0d10\0\u010a\0\u0d36\0\u0d5c\0\u0d82\0\u0da8\0\u0dce"+
    "\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8\0\u0efe"+
    "\0\u0f24\0\u0f4a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2\0\u1008\0\u102e"+
    "\0\u0da8\0\u1054\0\u107a\0\u10a0\0\u010a\0\u10c6\0\u10ec\0\u1112"+
    "\0\u1138\0\u115e\0\u1184\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242"+
    "\0\u1268\0\u128e\0\u12b4\0\u12da\0\u1300\0\u1326\0\u134c\0\u010a"+
    "\0\u1372\0\u1398\0\u13be\0\u13e4\0\u140a\0\u1430\0\u1372\0\u1456"+
    "\0\u147c\0\u14a2\0\u010a\0\u14c8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\41\4\1\7\1\10\1\11\1\12"+
    "\5\11\1\13\15\11\1\14\1\15\15\11\1\16\1\17"+
    "\1\11\1\20\5\11\1\21\10\11\1\22\2\11\1\23"+
    "\20\11\1\24\1\25\2\4\1\0\44\4\1\5\1\0"+
    "\41\4\2\5\3\0\1\26\4\0\1\27\7\0\1\30"+
    "\1\0\1\31\3\0\1\32\1\0\1\33\1\0\1\34"+
    "\2\0\1\35\1\36\2\0\1\37\4\0\1\4\1\5"+
    "\1\0\41\4\1\5\1\10\47\0\1\12\5\0\1\13"+
    "\11\0\1\40\4\0\1\41\14\0\1\42\2\12\25\43"+
    "\1\0\20\43\7\0\1\44\37\0\1\12\5\0\1\13"+
    "\11\0\1\40\4\0\1\41\14\0\1\42\1\12\1\17"+
    "\1\0\1\20\5\0\1\21\34\0\2\20\21\0\1\45"+
    "\41\0\1\46\31\0\1\20\5\0\1\21\34\0\1\20"+
    "\1\25\4\0\1\47\52\0\1\50\55\0\1\51\55\0"+
    "\1\52\34\0\1\53\1\0\1\54\5\0\1\55\1\0"+
    "\1\56\2\0\1\57\1\60\2\0\1\61\25\0\1\62"+
    "\54\0\1\63\46\0\1\64\45\0\1\65\1\66\47\0"+
    "\1\67\52\0\1\70\35\0\1\71\14\0\25\43\1\72"+
    "\20\43\6\0\1\73\62\0\1\74\27\0\1\75\52\0"+
    "\1\76\41\0\1\77\67\0\1\100\36\0\1\101\55\0"+
    "\1\102\35\0\1\103\54\0\1\104\46\0\1\105\45\0"+
    "\1\106\1\107\47\0\1\110\41\0\1\111\45\0\1\112"+
    "\22\0\1\113\45\0\1\114\31\0\1\115\36\0\1\116"+
    "\37\0\1\117\52\0\1\120\46\0\1\121\22\0\1\122"+
    "\54\0\1\123\37\0\1\124\52\0\1\125\37\0\1\126"+
    "\70\0\1\127\23\0\1\130\67\0\1\131\45\0\1\132"+
    "\45\0\1\133\22\0\1\134\45\0\1\135\31\0\1\136"+
    "\36\0\1\137\37\0\1\140\54\0\1\141\45\0\1\142"+
    "\50\0\1\143\51\0\1\144\42\0\1\35\44\0\1\145"+
    "\47\0\1\146\40\0\1\70\36\0\1\147\42\0\1\150"+
    "\27\0\1\151\42\0\2\151\14\0\1\152\53\0\1\143"+
    "\54\0\1\153\21\0\1\154\70\0\1\155\46\0\1\156"+
    "\45\0\1\157\50\0\1\160\51\0\1\161\42\0\1\57"+
    "\44\0\1\162\47\0\1\163\15\0\1\164\72\0\1\165"+
    "\44\0\1\166\52\0\1\167\41\0\1\170\13\0\1\171"+
    "\42\0\2\171\24\0\1\172\21\0\3\173\1\0\42\173"+
    "\15\0\1\174\60\0\1\33\16\0\1\160\5\0\1\175"+
    "\12\0\1\160\21\0\2\160\31\0\1\176\22\0\1\177"+
    "\72\0\1\200\13\0\1\160\5\0\1\175\34\0\2\160"+
    "\32\0\1\201\52\0\1\202\41\0\1\203\43\0\1\143"+
    "\35\0\1\143\12\0\1\143\50\0\1\204\37\0\1\205"+
    "\35\0\1\206\25\0\1\207\42\0\2\207\3\173\1\210"+
    "\42\173\16\0\1\211\57\0\1\55\46\0\1\160\35\0"+
    "\1\160\12\0\1\160\50\0\1\212\37\0\1\213\35\0"+
    "\1\214\61\0\1\215\43\0\1\215\54\0\1\216\4\0"+
    "\1\207\23\0\1\217\16\0\2\207\7\0\1\220\55\0"+
    "\1\221\63\0\1\222\43\0\1\222\54\0\1\223\24\0"+
    "\1\224\45\0\1\225\24\0\25\226\1\0\20\226\1\0"+
    "\1\227\42\0\2\227\21\0\1\230\45\0\1\231\56\0"+
    "\1\143\1\0\1\143\42\0\1\232\14\0\25\226\1\233"+
    "\20\226\32\0\1\160\1\0\1\160\42\0\1\234\51\0"+
    "\1\113\45\0\1\134\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5358];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\5\1\1\11\1\1\1\11\5\1\1\11\4\1"+
    "\16\0\1\11\25\0\1\11\25\0\1\11\5\0\1\1"+
    "\14\0\1\11\25\0\1\1\3\0\1\11\22\0\1\11"+
    "\6\0\1\1\3\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  	private Parser yyparser;
  	private HashMap<String, Short> tagToToken;
 	
 	public Yylex(java.io.Reader r, Parser yyparser) {
    	this(r);
    	this.yyparser = yyparser;

		tagToToken = new HashMap<String, Short>();
		tagToToken.put("open-films", Parser.OPEN_FILMS);
		tagToToken.put("open-film", Parser.OPEN_FILM);
		tagToToken.put("open-titolo", Parser.OPEN_TITLE);
		tagToToken.put("open-sottotitolo", Parser.OPEN_SUBTITLE);
		tagToToken.put("open-attori", Parser.OPEN_ACTOR);
		tagToToken.put("open-attore", Parser.OPEN_ACTORS);
		tagToToken.put("open-nome", Parser.OPEN_NAME);
		tagToToken.put("open-cognome", Parser.OPEN_SURNAME);
		tagToToken.put("open-compagnie", Parser.OPEN_COMPANIES);
		tagToToken.put("open-compagnia", Parser.OPEN_COMPANY);
		tagToToken.put("open-categorie", Parser.OPEN_CATEGORIES);
		tagToToken.put("open-categoria", Parser.OPEN_CATEGORY);

		tagToToken.put("close-films", Parser.CLOSE_FILMS);
		tagToToken.put("close-film", Parser.CLOSE_FILM);
		tagToToken.put("close-titolo", Parser.CLOSE_TITLE);
		tagToToken.put("close-sottotitolo", Parser.CLOSE_SUBTITLE);
		tagToToken.put("close-attori", Parser.CLOSE_ACTOR);
		tagToToken.put("close-attore", Parser.CLOSE_ACTORS);
		tagToToken.put("close-nome", Parser.CLOSE_NAME);
		tagToToken.put("close-cognome", Parser.CLOSE_SURNAME);
		tagToToken.put("close-compagnie", Parser.CLOSE_COMPANIES);
		tagToToken.put("close-compagnia", Parser.CLOSE_COMPANY);
		tagToToken.put("close-categorie", Parser.CLOSE_CATEGORIES);
		tagToToken.put("close-categoria", Parser.CLOSE_CATEGORY);
  	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("\tTAG-CONTENT:" + yytext());

		return Parser.TAG_CONTENT;
            }
          case 16: break;
          case 2: 
            { 
            }
          case 17: break;
          case 3: 
            { throw new Error("Illegal character '" + yytext() + "' at line " + yyline);
            }
          case 18: break;
          case 4: 
            { return Parser.NL;
            }
          case 19: break;
          case 5: 
            { yybegin(YYINITIAL);	

		return Parser.CLOSE_OPENING;
            }
          case 20: break;
          case 6: 
            { yybegin(YYINITIAL);
		return Parser.DOCTYPE_CLOSE;
            }
          case 21: break;
          case 7: 
            { yybegin(YYINITIAL);
		
		return Parser.CLOSE_SELF_CLOSING;
            }
          case 22: break;
          case 8: 
            { String matchedText = yytext();
		String attributeValue = matchedText.substring(1, matchedText.length()-1);
		System.out.println("\t\tATTRIBUTE-VALUE: " + attributeValue);
            }
          case 23: break;
          case 9: 
            { String matchedText = yytext();
		String attributeName = matchedText.substring(0, matchedText.length()-1);
		System.out.println("\tATTRIBUTE-NAME: " + attributeName);
            }
          case 24: break;
          case 10: 
            { String matchedText = yytext().trim();
		String tagName = matchedText.substring(1, matchedText.length());
		System.out.println("OPENING TAG: " + tagName);
		yybegin(InsideOpeningTag);

		return tagToToken.get("open-"+tagName);
            }
          case 25: break;
          case 11: 
            { System.out.println("DOCTYPE_ROOT_TAG: " + yytext().trim());

		return Parser.DOCTYPE_ROOT_TAG;
            }
          case 26: break;
          case 12: 
            { String matchedText = yytext().trim();
		String tagName = matchedText.substring(2, matchedText.length()-1);
		System.out.println("CLOSING TAG: " + tagName);

		return tagToToken.get("close-"+tagName);
            }
          case 27: break;
          case 13: 
            { String matchedText = yytext();
		System.out.println("XML PREAMBLE: " + matchedText);

		return Parser.XML_PREAMBLE;
            }
          case 28: break;
          case 14: 
            { yybegin(InsideDOCTYPE);

		return Parser.DOCTYPE_OPEN;
            }
          case 29: break;
          case 15: 
            { System.out.println("DOCTYPE_SYSTEM: " + yytext());
		System.out.println("DOCTYPE_FILENAME: " + yytext().replaceAll(" ","").replace("SYSTEM",""));

		return Parser.DOCTYPE_SYSTEM_AND_FILENAME;
            }
          case 30: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
